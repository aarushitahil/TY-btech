#include <stdio.h>

int knapsack(int W, int wt[], int val[], int n) {
    int dp[W + 1];  // dp[i] stores the max value for knapsack capacity i

    // Initialize 
    for (int i = 0; i <= W; i++) {
        dp[i] = 0;
    }

    // Loop through all items
    for (int i = 0; i < n; i++) {
        // Traverse dp array backwards to avoid using the same item multiple times
        for (int w = W; w >= wt[i]; w--) {
            // If including item i improves the value, update dp[w]
            dp[w] = (dp[w] > dp[w - wt[i]] + val[i]) ? dp[w] : dp[w - wt[i]] + val[i];
        }
    }

    return dp[W];  // The maximum value that can be obtained for knapsack capacity W
}


int main() {
    int weights[] = {15, 20, 30};  
    int values[] = {60, 100, 120}; 
    int W = 50;  
    int n = sizeof(weights) / sizeof(weights[0]);

    int maxValue = knapsack(W, weights, values, n);
    printf("Maximum value in Knapsack = %d\n", maxValue);

    return 0;
}
